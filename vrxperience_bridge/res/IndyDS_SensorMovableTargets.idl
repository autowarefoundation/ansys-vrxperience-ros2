// Copyright 2020 Adam Gotlib (WUT Driverless)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module IndyDS {

  struct SensorMovableTarget {
        short id;
        short scanerId;
        short detectionStatus;
        short type_;
        short beamIndex;
        double existenceTime;
        short anchorPoint;
        short referenceFrame;
        double posXInChosenRef;
        double posYInChosenRef;
        double posZInChosenRef;
        float posHeadingInChosenRef;
        float posPitchInChosenRef;
        float posRollInChosenRef;
        float distanceToCollision;
        float azimuthInSensor;
        float elevationInSensor;
        float azimuthInVehicle;
        float elevationInVehicle;
        float absoluteSpeedX;
        float absoluteSpeedY;
        float absoluteSpeedZ;
        float absoluteAngularSpeedH;
        float absoluteAngularSpeedP;
        float absoluteAngularSpeedR;
        float relativeSpeedX;
        float relativeSpeedY;
        float relativeSpeedZ;
        float relativeAngularSpeedH;
        float relativeAngularSpeedP;
        float relativeAngularSpeedR;
        float absoluteAccelX;
        float absoluteAccelY;
        float absoluteAccelZ;
        float relativeAccelX;
        float relativeAccelY;
        float relativeAccelZ;
        float length;
        float width;
        float height;
        float visibility;
  };

  struct SensorMovableTargets {
        short egoVhlId;
        long globalId;
        short nearestTarget;
        sequence<IndyDS::SensorMovableTarget> targetsArray;
        double timeOfUpdate;
  };

  #pragma keylist SensorMovableTargets
};
