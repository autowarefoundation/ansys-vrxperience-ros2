module IndyDS {

  struct RoadLinePolynom {
        short lineId;
        double c0;
        double c1;
        double c2;
        double c3;
        double curvatureRadius;
        double estimatedCurvatureRadius;
  };

  struct RoadLinesPolynoms {
        short egoVhlId;
        long globalId;
        octet isNoisy;
        short referenceFrame;
        sequence<IndyDS::RoadLinePolynom> roadLinesPolynomsArray;
        double timeOfUpdate;
  };

  struct SensorTargetBBox {
        short id;
        short referenceFrame;
        double rearBottomRightX;
        double rearBottomRightY;
        double rearBottomRightZ;
        double rearTopRightX;
        double rearTopRightY;
        double rearTopRightZ;
        double rearbottomLeftX;
        double rearbottomLeftY;
        double rearbottomLeftZ;
        double rearTopLeftX;
        double rearTopLeftY;
        double rearTopLeftZ;
        double frontBottomRightX;
        double frontBottomRightY;
        double frontBottomRightZ;
        double frontTopRightX;
        double frontTopRightY;
        double frontTopRightZ;
        double frontbottomLeftX;
        double frontbottomLeftY;
        double frontbottomLeftZ;
        double frontTopLeftX;
        double frontTopLeftY;
        double frontTopLeftZ;
  };

  struct SensorMovableTargetsBoundingBoxes {
        sequence<IndyDS::SensorTargetBBox> boundingBoxesArray;
        long globalId;
        double timeOfUpdate;
        short vhlId;
  };

  struct GPS {
        double altitude;
        long globalId;
        float hdop;
        double lastUpdate;
        double latitude;
        double longitude;
        short satellites;
        short sensorId;
        short vhlId;
  };

  struct LaserMeterPoint {
        octet hit;
        float Hangle;
        float Vangle;
        double absposx;
        double absposy;
        double absposz;
        float relposx;
        float relposy;
        float relposz;
        float distance;
  };

  struct LaserMeter {
        short frameCount;
        long globalId;
        double lastUpdate;
        short nearestPoint;
        sequence<IndyDS::LaserMeterPoint> resultArray;
        short sensorId;
        short vhlId;
  };

  struct SensorMovableTarget {
        short id;
        short scanerId;
        short detectionStatus;
        short type_;
        short beamIndex;
        double existenceTime;
        short anchorPoint;
        short referenceFrame;
        double posXInChosenRef;
        double posYInChosenRef;
        double posZInChosenRef;
        float posHeadingInChosenRef;
        float posPitchInChosenRef;
        float posRollInChosenRef;
        float distanceToCollision;
        float azimuthInSensor;
        float elevationInSensor;
        float azimuthInVehicle;
        float elevationInVehicle;
        float absoluteSpeedX;
        float absoluteSpeedY;
        float absoluteSpeedZ;
        float absoluteAngularSpeedH;
        float absoluteAngularSpeedP;
        float absoluteAngularSpeedR;
        float relativeSpeedX;
        float relativeSpeedY;
        float relativeSpeedZ;
        float relativeAngularSpeedH;
        float relativeAngularSpeedP;
        float relativeAngularSpeedR;
        float absoluteAccelX;
        float absoluteAccelY;
        float absoluteAccelZ;
        float relativeAccelX;
        float relativeAccelY;
        float relativeAccelZ;
        float length;
        float width;
        float height;
        float visibility;
  };

  struct SensorMovableTargets {
        short egoVhlId;
        long globalId;
        short nearestTarget;
        sequence<IndyDS::SensorMovableTarget> targetsArray;
        double timeOfUpdate;
  };

  struct CabToModelCorrective {
        double AcceleratorAdditive;
        double AcceleratorMultiplicative;
        double BrakeAdditive;
        double BrakeMultiplicative;
        double ClutchAdditive;
        double ClutchMultiplicative;
        short GearboxAutoMode;
        octet GearboxTakeOver;
        octet IsRatioLimit;
        short MaxRatio;
        short MinRatio;
        double ParkingBrakeAdditive;
        double ParkingBrakeMultiplicative;
        octet ShiftDown;
        octet ShiftUp;
        double TimeOfUpdate;
        short WantedGear;
  };

  struct CabToSteeringCorrective {
        double AdditiveSteeringWheelAccel;
        double AdditiveSteeringWheelAngle;
        double AdditiveSteeringWheelSpeed;
        double AdditiveSteeringWheelTorque;
        double MultiplicativeSteeringWheelAccel;
        double MultiplicativeSteeringWheelAngle;
        double MultiplicativeSteeringWheelSpeed;
        double MultiplicativeSteeringWheelTorque;
        double TimeOfUpdate;
  };

  struct VehicleOutput {
        double CustomOutput[512];
        double EngineSpeed;
        octet EngineState;
        long GearBoxMode;
        long GearEngaged;
        long GroundIndex[4];
        double LSR[4];
        double SteeringWheelAccel;
        double SteeringWheelAngle;
        double SteeringWheelSpeed;
        double SteeringWheelTorque;
        double TimeOfUpdate;
        double TraveledDistance;
        octet absIsActive[4];
        long auxiliaryLights;
        double brakePedal;
        double brakeRetarderNotch;
        double brakeTemperature[4];
        double cdgAccel_heading;
        double cdgAccel_pitch;
        double cdgAccel_roll;
        double cdgAccel_x;
        double cdgAccel_y;
        double cdgAccel_z;
        double cdgPos_heading;
        double cdgPos_pitch;
        double cdgPos_roll;
        double cdgPos_x;
        double cdgPos_y;
        double cdgPos_z;
        double cdgSpeed_heading;
        double cdgSpeed_pitch;
        double cdgSpeed_roll;
        double cdgSpeed_x;
        double cdgSpeed_y;
        double cdgSpeed_z;
        double clutchPedal;
        double consumption;
        double contactPoint_x[4];
        double contactPoint_y[4];
        double contactPoint_z[4];
        long effectiveIgnitionKeyPosition;
        octet forceLockup;
        double gasPedal;
        double grip[4];
        double groundNormal_x[4];
        double groundNormal_y[4];
        double groundNormal_z[4];
        long groundType[4];
        double handBrake;
        double hubPosition_heading[4];
        double hubPosition_pitch[4];
        double hubPosition_roll[4];
        double hubPosition_x[4];
        double hubPosition_y[4];
        double hubPosition_z[4];
        octet isEngineRetarder;
        octet isInContact[4];
        long laneType[4];
        long lights;
        long lockDiffMode;
        long plowMode;
        double pollution;
        double roughnessHeight[4];
        double roughnessHeightStdDeviation[4];
        double roughnessLength[4];
        double roughnessLengthStdDeviation[4];
        long sirens;
        double slipAngle[4];
        double tireForce_x[4];
        double tireForce_y[4];
        double tireForce_z[4];
        double trailerBrake;
        long transferChoice;
        double waterHeight[4];
        double wheelRotation[4];
        double wheelRotationSpeed[4];
  };

  #pragma keylist RoadLinesPolynoms
  #pragma keylist SensorMovableTargetsBoundingBoxes
  #pragma keylist GPS
  #pragma keylist LaserMeter
  #pragma keylist SensorMovableTargets
  #pragma keylist CabToModelCorrective
  #pragma keylist CabToSteeringCorrective
  #pragma keylist VehicleOutput
};
